ls()
pwd
pwd()
version()
available.packages()
install.packages(slidify)
install.packages("slidify")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("kernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
exit()
quit()
q()
q()
pwd()
ls()
pwde
pwd
exit()
quit()
x <- 1
x
print x11()
print x()
print(x)
x <- 1:20
x
x
attriubutes(x)
attributes(x)
x <- c(0.5, 0.6)
x
x <- 4
class()
class(x)
x <- c(4,TRUE)
class(x)
clear()
x <- c(4,TRUE)
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- list(2,"a","b" TRUE)
x <- list(2,"a","b",TRUE)
x[[1]]
x <- 1:4
y <- 2
x+y
x <- c(3,5,1,10,12,6)
x()
print(x)
x[x<6] == 0
x[x!=6] <- 0
print(x)
x <- c(3,5,1,10,12,6)
print(x)
x[x%in% 1:5] <- 0
print(x)
quit()
install.packages(swirl)
install.packages("swirl")
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit(boring_function)
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c4,5,10)
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x(1)},c(8,4,0))
info()
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming","is", "fun!")
submit
submit()
telegram("Hello", "world!")
submit()
mad_libs(place=city,adjective=red,noun=beach)
mad_libs(city, red, beach)
mad_libs(place=z adjective=y noun=c)
?
mad_libs()
submit
submit()
"I" %p% "love" %p% "R!"
quit()
ls()
getwd()
q()
cube <- function(x,n){
x^3sub
}
submit()
getwd()
submit()
cube(3)
source('~/.active-rstudio-document')
cube <- function(x,n){
x^3
}
cube(3)
x <- 1:10
if(x>5) {}
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
args(h)
h
getwd()
setwd("C:/Users/dschrass/Desktop/Docs/JHU/Class2_R/week3/test")
dir()
source("test.R")
source("test2.R")
getwd()
cd
setwd(..)
setwd()
setwd("C:/Users/dschrass/Desktop/Docs/JHU/Class2_R/week3/")
getwd()
ls()
dir()
setwd("C:/Users/dschrass/Desktop/Docs/JHU/Class2_R/week3/ProgrammingAssignment2")
source("cachematrix.R")
